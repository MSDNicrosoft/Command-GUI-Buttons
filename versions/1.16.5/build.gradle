apply(plugin: "fabric-loom")
apply(plugin: "com.replaymod.preprocess")
apply(plugin: "top.hendrixshen.replace-token")

repositories {
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }

    maven {
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
    }

    maven {
        name = "HangBing Proxy"
        url = "https://repository.hanbings.io/proxy"
    }

    maven {
        name = "Nyan Maven"
        url = "https://maven.hendrixshen.top/releases"
    }

    mavenCentral()
    mavenLocal()
}

int mcVersion = 1

preprocess {
    mcVersion = vars.get().get("MC")
}

dependencies {
    // Development environment
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())
    modApi("net.fabricmc:fabric-loader:${project.loader_version}")

    // Annotation processor
    modApi("org.projectlombok:lombok:${project.lombok_version}")
    annotationProcessor("org.projectlombok:lombok:${project.lombok_version}")

    // Dependency
    modApi("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modApi("io.github.cottonmc:LibGui:${project.libgui_version}")
    modApi("maven.modrinth:modmenu:${project.modmenu_version}")

    // Make development client more comfortable.
    modRuntimeOnly("top.hendrixshen.magiclib:magiclib-better-dev-${project.minecraft_version}${project.minecraft_version.size() == 4 ? ".0" : ""}-fabric:0.3.60-beta") {
        transitive = false
    }

    modRuntimeOnly("top.hendrixshen.magiclib:magiclib-core-fabric:0.8.153") {
        transitive = false
    }

    runtimeOnly(project(path: ":fabricWrapper"))
}

tasks.named("runClient") {
    doFirst {
        layout.projectDirectory.file("run/client/options.txt").asFile.with { File file ->
            if (!file.exists()) {
                file.parentFile.mkdirs()
                file.withWriter { BufferedWriter writer ->
                    writer.writeLine("autoJump:false")
                    writer.writeLine("enableVsync:false")
                    writer.writeLine("forceUnicodeFont:true")
                    writer.writeLine("fov:1.0")
                    writer.writeLine("gamma:1.0")
                    writer.writeLine("guiScale:3")
                    writer.writeLine("lang:${Locale.getDefault().toString()}")
                    writer.writeLine("maxFps:260")
                    writer.writeLine("renderDistance:10")
                    writer.writeLine("soundCategory_master:0.0")
                }
            }
            null // We don't need to return anything.
        }
    }
}

// Useless, but we write here.
// Setup server default settings.
tasks.named("runServer") {
    doFirst {
        // Agree eula before server init.
        layout.projectDirectory.file("run/server/eula.txt").asFile.with { File file ->
            if (!file.exists()) {
                file.parentFile.mkdirs()
                file.withWriter { BufferedWriter writer ->
                    writer.writeLine("eula=true")
                }
            }
            null // We don't need to return anything.
        }
    }
}

loom {
    runConfigs.configureEach {
        // Dump modified classes automatically.
        property("mixin.debug.export", "true")
    }

    // We need large window.
    runConfigs.client {
        programArgs([
                "--width",
                "1920",
                "--height",
                "1080",
        ])
        runDir("run/client")
    }

    // Useless, but we write here.
    runConfigs.server {
        runDir("run/server")
    }
}

setVersion(project.parent.version)
setGroup(project.maven_group)


base {
    archivesName.set("${project.archives_base_name}-mc${project.minecraft_out}")
}

replaceToken {
    targetSourceSets.set([sourceSets.main])

    replace("@MOD_ID@", project.mod_id)
    replace("@MINECRAFT_VERSION_ID@", project.minecraft_version.replace(".", "_"))
    replaceIn("work/msdnicrosoft/commandbuttons/CommandButtonsReference")
}

processResources {
    outputs.upToDateWhen { false }

    filesMatching("fabric.mod.json") {
        expand([
                "minecraft_dependency" : project.minecraft_dependency,
                "minecraft_version_id" : project.minecraft_version.replace(".", "_"),
                "minecraft_version_out": project.minecraft_out,
                "mod_id"               : project.mod_id,
                "mod_name"             : project.mod_name,
                "mod_license"          : project.mod_license,
                "mod_sources"          : project.mod_sources,
                "mod_version"          : project.version,
        ])
    }
}

java {
    if (mcVersion > 12004) {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    } else if (mcVersion > 11701) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    } else if (mcVersion > 11605) {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
    } else {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    withSourcesJar()
}

jar {
    from("../../LICENSE")
}

tasks.register("cleanRun") {
    doLast {
        // Clean up the run directory.
        layout.projectDirectory.dir("run").asFile.deleteDir()
    }
}
