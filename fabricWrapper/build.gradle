import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
    id("java-library")
}

base {
    version = project.parent.version
    group = project.maven_group
    archivesName = "${project.archives_base_name}-all"
}

def fabric_subprojects = project.rootProject.subprojects.findAll({
    it.name != "fabricWrapper"
})

fabric_subprojects.collect {
    evaluationDependsOn(":${it.name}")
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    // Disable cache
    outputs.upToDateWhen { false }
    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    from(project.rootProject.file("LICENSE"))
    from(layout.buildDirectory.dir("tmp/submods"))

    doFirst {
        delete fileTree(layout.buildDirectory.dir("tmp/submods/META-INF/jars"))
        copy {
            from {
                fabric_subprojects.collect {
                    it.remapJar.outputs.files
                }
            }
            into(layout.buildDirectory.dir("tmp/submods/META-INF/jars"))
        }
    }
}

processResources {
    // Disable cache
    outputs.upToDateWhen { false }

    filesMatching("fabric.mod.json") {
        expand(["mod_version": project.version,
                "mod_id"     : project.mod_id,
                "mod_name"   : project.mod_name,
                "mod_sources": project.mod_sources,
                "mod_license": project.mod_license
        ])
    }

    doLast {
        ArrayList<?> mc_condition = []
        ArrayList<?> jars = []

        fabric_subprojects.each({
            mc_condition.add("${it.minecraft_dependency}")
            jars.add(["file": "META-INF/jars/${project.archives_base_name}-mc${it.minecraft_out}-${it.version}.jar"])
        })

        File file = layout.buildDirectory.file("resources/main/fabric.mod.json").getOrNull().asFile
        JsonSlurper slurper = new JsonSlurper()
        JsonBuilder builder = new JsonBuilder(slurper.parse(file))
        builder.content.depends.minecraft = mc_condition
        builder.content.jars = jars
        BufferedWriter writer = file.newWriter()
        writer.append(builder.toPrettyString())
        writer.flush()
        writer.close()
    }
}